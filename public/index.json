[{"content":"以下内容摘录自微博，觉得很有用，记录下：\n告诉你一个秘密，真正厉害的人是用能力做事，愿力领事，心力成事。 你要明白，所有的能力都是术，都是技能，都是通过时间可以获得的，都是在“做”的层面，是操作而已，是熟能生巧的技术活。 要成事，能力真的不是最重要的，很多技术牛人为什么会创业失败，就是因为太看重自己的技术能力了。 而愿力，指的是一切心愿的力量，是人们内心深处最高层次的需求和追求，以及为了实现这些目标而付出努力的力量展现。愿力越大，号召力就越大，就能吸引众多同频的人事物一起成事。 因此，愿力就像地心吸引力一样，能把众多的同频之人事物，从宇宙中源源不断的吸引过来。 心力，就是成事的能力，是能力和愿力同频共振的统一体，是天地人三才合一的综合体现，心力和时间没有关系，心力只是天道合一。 俗话说：富在术数，不在劳身；利在局势，不在力耕。所以，你要抬头看路，上拥趋势，下承人势，做天时地利人和的操纵者，既要看清趋势，又要理清利弊。切记只会低头干活，使用蛮力。 所以，真正厉害的人，不仅仅擅长整合用能力做事，而且还会用适合于道，利于大众的愿力领事，更会用集思想之精华，精神之能量，意志之韧性的心力去成大事。\n","permalink":"http://localhost:1313/posts/2024-02-05-%E8%83%BD%E5%8A%9B%E5%81%9A%E4%BA%8B%E6%84%BF%E5%8A%9B%E9%A2%86%E4%BA%8B%E5%BF%83%E5%8A%9B%E6%88%90%E4%BA%8B/","summary":"以下内容摘录自微博，觉得很有用，记录下： 告诉你一个秘密，真正厉害的人是用能力做事，愿力领事，心力成事。 你要明白，所有的能力都是术，都是技能，","title":"能力做事，愿力领事，心力成事"},{"content":"做了这么多年少儿编程教育，期间遇到过几千个学习编程的孩子，各种各样的孩子都遇到过，那大多数的孩子都是学习比较好的，或者说以后大概率会成为学霸，为什么少儿编程有如此“功效”呢？\n首先我们怎么定义学霸？传统中我们认为学习好就是学霸，但是学霸不仅于此，学霸最基础的就是学习成绩还不错，其次学霸更多的是学习习惯、思维能力、综合素养都很好，这就具有学霸的潜质。\n而少儿编程正是这样一个载体，一种让孩子提升的途径。孩子一旦在少儿编程科目有一定的兴趣，有一定的成就感，就会很愿意继续学习下去，并且持续有正向激励，鼓励孩子继续探索，形成良性循环。\n少儿编程主要的环节就是老师引导孩子创作和解题，每次创作或解题都是一次刻意练习的过程。这个刻意练习的过程中，就会锻炼孩子学习习惯、思维能力、认真程度、专注力等等这些和学霸息息相关的能力，每一次刻意练习都会让孩子的这些能力增长一点点，那这么多次刻意练习下来，孩子一定会有不同程度的进步和提升。\n","permalink":"http://localhost:1313/posts/2024-01-09-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E7%BC%96%E7%A8%8B%E7%9A%84%E5%AD%A9%E5%AD%90%E4%BC%9A%E6%88%90%E4%B8%BA%E5%AD%A6%E9%9C%B8/","summary":"做了这么多年少儿编程教育，期间遇到过几千个学习编程的孩子，各种各样的孩子都遇到过，那大多数的孩子都是学习比较好的，或者说以后大概率会成为学霸","title":"为什么学编程的孩子会成为学霸？"},{"content":"2023已然过去，在2024新年元旦之际，有些话跃然纸上，与君共勉。\n2023年是忙碌且充实的一年。从2023年3月份开始，历数每月，我们这个团队做了很多活动，有校内的周年庆、节日活动，场外的营销活动、支持活动，还有外出的研学游、夏令营等等。说实话，每一场活动都很累，每个人内心都是想着把活动做的再圆满些，做的再成功些。每个人都尽心尽力，都不计较的完成份外之事。在这里道一句，大家辛苦啦！\n“人在事上练”，我们团队也是一点一点从这些活动中成长起来了，相信每个人也都感受到了团结和凝聚的力量，感受到了一起共同奋斗完成一场大活动的喜悦，一场场活动完成，不自觉的自己变得更强大，我们有了更多的经验，我们的底气更足，我们有了更坚实的发展基础。\n回望这一年，也是发展的一年。三年疫情终于结束，以后再也没有停课的日子了。我们从新出发，犹如鱼跃大海，确立好稳扎稳打的步调，开始每月计划，安排和行动，各位老师做好教学、教务，前端老师做好咨询、签单，团队中每个小伙伴都去努力，去把自己的工作做到更好，一步一步，成就了现在的特别美好的我们！特别值得一提的是，本年度，又有四位志同道合的小伙伴加入团队，融入新的生力军，让我们的团队更强大，在未来，能让这个强大的团队更具有迸发的力量。\n这一年，是逆境中向阳而生的一年，在全国各行业市场不景气的情况下，我们新招、续费、课消、获奖各个关键环节都取得了不错的成绩，这无疑给我，也给我们这个团队注入“我们能发展更好”的底气，这是确保我们2024发展的重要支撑，有了这种坚实的基础，我们团队才能发挥出无限潜力，创造更多无限的可能。\n2024年，正值“龙”年，也正好契合“代码龙”的名字，2024年，代码龙品牌和团队的核心口号和思想为“代码龙，龙行天下”。\n2024年，必须是发展的一年，没有了疫情的阻力，我们需要放开手脚，奋力拼搏，不仅要在校区内部，包括运营、营销、教学、教研、教务、管理等各个方面都要进行升级“代码龙品牌4.0”，还要在品牌宣传、ToB端合作等方面加快脚步，维度升级，利用一年的时间，从两个教育中心，扩展至面向全国的少儿编程教育品牌，探索新的模式，开启新的纪元。\n2024年，必须是突破自我的一年，这不仅是我，更是整个团队曲调的调整，要从“清扬悠然”的轻音乐，逐渐调整为“振奋人心”的交响曲，各个板块，各条业务线，都要有突破，有挑战！2024年，要的是张狂，要的是力量，要的是向前冲！\n各位小伙伴们，新的一年，新的开始，希望大家每个人心里都有那份呼之欲出的力量，让我们在2024年卯足干劲，突飞猛进，创造属于我们的美好未来！\n2024，代码龙，龙行天下！\n","permalink":"http://localhost:1313/posts/2024-01-01-2024%E5%BC%80%E5%B9%B4%E5%AF%84%E8%AF%AD%E4%BB%A3%E7%A0%81%E9%BE%99%E9%BE%99%E8%A1%8C%E5%A4%A9%E4%B8%8B/","summary":"2023已然过去，在2024新年元旦之际，有些话跃然纸上，与君共勉。 2023年是忙碌且充实的一年。从2023年3月份开始，历数每月，我们这个","title":"2024开年寄语：代码龙，龙行天下！"},{"content":"少儿编程从2017年开始在中国逐步推广以来，经历了许多波折，从2017 ~ 2019年市场火热，到2020 ~ 2022年经历疫情和双减期间的回落，到现在又有许多新的动态和变化，少儿编程在起起落落中曲折发展，所谓命途多舛。\n现在正值双减后，教育市场回归平静，回望各大编程教育品牌，有的在稳步发展，有的在停步不前，有的已经消失，有的已经暴雷，各有各的归宿。这些也都是市场中发展的常态，或者说任何行业的发展都是复杂的，发散的，会有各种想法的涌现和做法的落地，只是各有因果，各有自己给自己规划的路，无所谓好坏，只是走到哪个终点。\n从国家发展、政策导向和编程发展路径看，编程教育大政策不会变，呈现逐步上升的趋势。\n编程教育从2017年国务院发文推广开始，国内短时间内就出现了各大编程品牌，各大资本嗅到机会，纷纷入局，看好编程教育这块“既有刚需又能素质”的蛋糕，甚至被誉为下一个英语学科培训。在双减之前，编程教育市场出现火爆局面，品牌扩大、融资、加盟、开店，整个市场一片繁荣景象，大家对编程教育的信心也达到高潮。\n从2017~2019年间，也是编程教育从0开始摸索的阶段，那时候课程简单，基本上以图形化编程为主，老师做点类似游戏类的作品，就可以让孩子来认识积木模块，编写作品程序，给家长看，说这就是孩子做的编程，是未来的一门必修课，就可以卖很多钱。\n后来2020年疫情、2021年双减开始，给火热的编程教育狠狠一击，培训机构合法合规、市场信心不足，不是刚需这几项不利因素，导致市场出现资本撤出、品牌暴雷、市场加盟锐减等应激反应，这些都在限制整个编程教育的发展，各大编程教育品牌也都偃旗息鼓。\n其实也对，任何事情的发展必然从简单走向复杂，从低阶走向高阶，从红利走向内卷，编程教育也是如此。\n编程教育去除资本，回归教育本质。\n正是疫情、双减的经历，编程教育才能逐步回归平静，随着资本的撤出、广告宣传的断崖下降，营销成分大幅减少，编程教育的各大品牌都在经历寒冬，这对于教育来说，不见得是一件坏事。\n2023年，疫情褪去，双减的影响力也越来越弱，在寒冬中蛰伏的编程品牌也在寻找各自的突围点，想着如何在现有的状态下，有更好的发展。\n从这个阶段开始，编程教育市场才稳下来思考如何从教育出发，回归教育的本质，回归到课程、教学教研、教务中，回归到国家教育的正常发展中。\n信奥赛细分市场的崛起。\n山东市场在2023年年初开始，随着山东两位信奥赛选手崭露头角，并在国际IOI获得金牌，编程教育市场刮起了一阵信奥赛的狂风，这阵狂风正愈演愈烈，似乎每个孩子都要学C++，参加信奥赛拿奖。\n现在整个市场很乱，做乐高的开始叫少儿编程，教图形化的老师也开始临时学C++教信奥赛，整个编程教育也越来越卷，越来越混乱。\n整个市场的导向也影响到家长的理念，家长们从抖音、学校的信息中了解到信奥赛能帮助升学，所以一股脑的要求学C++信奥赛，不管适不适合，一切向”信奥赛能帮助升学“这条捷径看齐，信奥赛奖项真正成了“香饽饽”。\n更倾向于综合和科技素养的培养。\n从信奥赛如果真能帮助升学这一点来看，少儿编程从“非刚需”转变为“刚需”，只是，这不是每个人的刚需，而是极少数人的刚需。因为从历年信奥赛发展来看，从这条路获奖并走出来的是极少数的人，无数的学生走这条路，无异于挤独木桥。\n我更倾向于，信奥赛以后的发展，在混乱的局面之后，更需要回归理性，家长逐渐会打破信息差，会意识到信奥赛的真正价值，是在信竞赛的学习过程中，孩子能提升学习能力，能提升思维能力，能提升编程兴趣，即使最后拿不到有助于升学的结果，孩子也锻炼了能力，提升了自身水平。\n无论从哪一点看，信奥赛都是一个值得去发展的点，只是需要给市场时间，教育家长用正确的理念去看待信奥赛。\n还有一点值得考虑，现在国家芯片尖端科技、软件科技这些领域还是要努力提升，特别是高科技的基础设施，比如专业软件，还存在卡脖子的问题，国家必然要培养科技基础人才，这不免就要从教育入手，特别是编程教育入手，形成选拔机制，优选创新人才。\n所以整个编程的发展方向是提升整体学生的综合素养和科技素养，提升基础人才储备，逐步筛选拔尖人才，为以后的科技强国打下坚实的人才基础。\n","permalink":"http://localhost:1313/posts/2023-09-15-%E5%B0%91%E5%84%BF%E7%BC%96%E7%A8%8B%E6%95%99%E8%82%B2%E8%B6%8B%E5%8A%BF%E6%80%9D%E8%80%83/","summary":"少儿编程从2017年开始在中国逐步推广以来，经历了许多波折，从2017 ~ 2019年市场火热，到2020 ~ 2022年经历疫情和双减期间的回落，","title":"少儿编程教育趋势思考"},{"content":"在Python和C++代码教学中，经常会遇到一种现象，一道题的解法，同学们能听懂老师讲解的，但是自己写，却写不出来。深究其原因，才能有对应的措施。\n“能听懂”和“能写代码”是两种状态，两种状态是浅和深的关系，我原来写过一篇博客《浅谈少儿编程教育的浅与深》，这两种状态就是在孩子主动学习过程中，或者是孩子学习消化中的浅与深。\n能听懂是浅层次的，是对老师讲解的知识点都能听明白，能知道解题思路，这个状态是被动学习的过程阶段。往往这个阶段，学生还是某一些点（知识点）的掌握，没有连成线（解题思路），这个时候，知识还是老师的，还没有变成自己的。\n能写代码这个阶段，才是更深了一步，不管是通过老师的讲解还是自己的思路，能根据这些思维想法，写出相应的解题代码来，经过调试，运行通过，这才是自己的东西。说明自己掌握了这道题的相关知识点和解题思路。\n那么如果由浅入深，从“能听懂”到“能写代码”呢？\n第一，要学生自己先想解题思路。\n这一步特别重要，是必须要做的，一道题，不要上来就讲，要先同学们自己想解题思路，可以通过一些方式，比如提问，让学生紧张起来，让学生主动动脑子去想问题的解法。哪怕想不出来，也是刺激学生动脑，让学生养成遇到问题就要动脑思考的习惯。这一点是被动和主动的主要区别，由老师给喂，变成学生想知道答案，孩子主动去思考答案的转换。\n第二，讲解题思路，编写代码\n由上一步，学生经历思考过程后，对题目有一定的了解，老师再讲解题目的解法。首先要讲解题思路，就是这道题为什么要这么做，而不是单纯的只讲代码实现。要根据题目描述先分步骤，再讲每一步如何实现，最后再调试、验证通过。 在讲解过程中，要串联以前讲过的知识点和以前做过的题目，一边提问学生回答，一边写，和学生一块把代码写出来。让学生通过老师的写代码的过程，形成良好的代码风格、分模块步骤和为什么要这么写，这个阶段，要特别注意不要授予鱼，而授予渔。\n第三，尝试自己写代码。\n老师讲解后，学生尝试自己写代码，写不对，没有关系，这一步的关键在于“写起来“。只要动手写，就是自己成果的输出。写代码的过程中，一边对解题思路的再整理，一边熟练代码的语法。因为写代码本身就是一项实践活动，所以在实践中积累经验，逐步让自己掌握更多知识、解题思路，提升逻辑思维能力和解决问题能力。 这一部分也是让学生迈出自己的舒适区，进入到自己未知的区域，然后占领这个未知领域，变成自己的舒适区，再进入下一个未知区域，这是一个成长落地的过程。\n第四，多次调试，直到通过。\n调试，直到通过也是非常关键的一步。这一步对于培养孩子的逆商、迭代思维都有非常积极的影响。写代码允许一遍又一遍的调试，就是在调试的过程中，深入理解代码运行的原理、熟悉语法、三大结构和提升“代码敏感”度。让孩子享受经过了重重困难，直到运行成功的成就感，提升孩子的自信，刺激进入下一个未知领域，形成良性循环，逐渐成长。\n解决每一道题，就是一次刻意练习，在刻意练习中，通过阅读理解、抽象出关键问题、调用掌握的知识点、形成解题思路、分模块写代码、调试、运行通过，逐渐积累自己的题感，提升自己解题能力，再向上发展。\n当通过以上的刻意练习，解决每一道题后，再下一个阶段就是要形成自己的知识体系，不断的完善自己的知识体系，让自己达到新的高度，逐渐去成长。\n","permalink":"http://localhost:1313/posts/2022-12-25-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%81%9A%E9%A2%98%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%BB%A3%E7%A0%81%E8%83%BD%E5%90%AC%E6%87%82%E4%BD%86%E5%86%99%E4%B8%8D%E5%87%BA%E6%9D%A5/","summary":"在Python和C++代码教学中，经常会遇到一种现象，一道题的解法，同学们能听懂老师讲解的，但是自己写，却写不出来。深究其原因，才能有对应的","title":"为什么做题过程中，代码能听懂，但写不出来？"},{"content":"最近有些放松，一是心态上，从2019年开始，经过了三年的努力，两家校区开始做起来，现在也小有规模，暂时取得了一些成功，压力不像以前那么大，再加上最近口罩原因，市场不景气、属于静默状态，心态有些躺平。再就是最近校区之外的事比较多，教育局的、家里的各种事情要去做，事多了就分神，不像以前那么专注，校区的教学和运营上就没那么关心。 今天早上看了竞争对手的一些朋友圈和抖音，感觉别人都非常优秀，也都非常努力，都做了很多事情，每一家也都逐渐有了自己的优势，心中不免埋怨自己不够努力，所以还得继续加油，否则不进则退。\n要把宣传重视起来，一定要做好宣传工作，把好的东西宣传出去。 在这个时代，不要只默默在做，没有宣传出去，别人看不到，就相当于没做。早上在看别人的宣传的同时，深深感觉我们的宣传做的太不够，朋友圈几天才发一条，抖音也是好几个月不更，质量也不够精良，明显和同行相差太多。品宣这件事是接下来的重中之重，想要发展扩大，必须要把这一点重视起来，做起来。 再者是劲头，要把精神提起来，不能躺平，不能摆烂，而是要往前冲，要积极向上，要保持在潍坊少儿编程的头部位置，不能懈怠。 首先是自己的劲头，更重要的是团队，要带领整个团队跑起来。位置在，责任就在，现在团队有10多个老师和5百多个学生，他们的成长和发展，是摆在首要地位的，是至关重要的。成功在于每一天的积累，氛围和组织如果低迷，那么后果只能是整体下滑，更何谈发展扩大可言。要积极，要形成争强好胜，才能持续发展，才能胜于对手，领先对手。 再精进自己和团队的专业水平，放大专业优势，逐渐形成品牌的特色。 这一切都要围绕少儿编程专业来做。首先是自己，要再加强少儿编程价值的研究，不要觉得懂点编程就觉得是专业，是专家。懂编程，懂教学，是自己的优势，更要深知的是文无第一，学无止境，优秀的人比你更努力，不进则退的道理。看看真正有含金量的证书，看看全国优秀的成熟品牌，自己差的还很远很远，不精进，那是永远赶不上的。再者带领团队提升专业水平，想要发展不是个人的事情，而是团队携手奋斗的事情，只有共同努力，整体提升，才会整体向上走。现在团队小伙伴基础都很优秀，如何让大家再精进，再向上发展，这很大一部分决定因素就是火车头的组织力。如何有效的组织，如何有效的提升，如何有效的快速提升，这都是很深的学问。要一点一点去积累，一点一点去总结经验，才能逐渐形成体系，达成目标。 这三点是现在最紧急，最需要去做的，在做的过程中要不断积累力量，虽然现在疫情，虽然现在有困难，但是路在脚下，目标在前方，朝着目标奔跑总不会错。时刻谨记：优秀的人比你还努力，你还有什么不努力的理由呢？！持续奋斗吧，少年！\n","permalink":"http://localhost:1313/posts/2022-11-27-%E4%B8%8D%E8%BF%9B%E5%88%99%E9%80%80%E8%BF%98%E9%9C%80%E5%86%8D%E5%A5%8B%E6%96%97/","summary":"最近有些放松，一是心态上，从2019年开始，经过了三年的努力，两家校区开始做起来，现在也小有规模，暂时取得了一些成功，压力不像以前那么大，再","title":"不进则退，还需再奋斗！"},{"content":"最近通过写《编程，是一种更有效的刻意练习工具》，还有《少儿编程的需求价值分析》这两篇文章，也思考了很多少儿编程整个教学链条，从主张到理念再到落地，有了初步的闭环。也记录下来。\n主张：让更多的孩子从编程中受益。通过因材施教，不同的孩子通过少儿编程学习受益。\n理念：少儿编程不仅仅是学技能，更能提高孩子的九大能力和综合素养。\n教学方法：PBL项目式编程、思维导图、流程图、引导式教学、翻转课堂等等\n我们一直在倡导理念是不仅仅学编程技能，更重要的是通过学习少儿编程提升孩子的九大能力：观察力、专注力、想象力、创造力、逻辑思维能力、解决问题能力、学科能力、表达能力和复盘能力。\n那么我们倡导的提升九大能力不仅仅是口号，而且要如何落实在我们的教学和教务中？\n反过来说，我们在课程中不是采用编程积木和代码语法的简单灌输和实践，而是采用项目式教学（一节课一个项目），分析项目、拆解问题、解决问题而完成一堂课。一趟课程中又设计很多教学环节、教学方法，还有教务，那么在课堂中培养孩子的九大能力的点到底体现在哪儿？\n教学理念和教学课堂中间就缺少这么一环去承接，或者说理念如何落实的问题，课程如何支撑理念的问题。\n解决这一个问题的就是刻意练习。\n刻意练习在于有效的提升某一技能的方法。这个方法可以是学会弹钢琴，也可以是提升专注力，也可以是培养某种性格。\n这种刻意练习是在“一万个小时”理论之上，更有效的方法。\n那么刻意练习是如何贯穿少儿编程教学的呢？\n《刻意练习》这本书中讲到刻意练习分为四个阶段：\n产生兴趣 变的认真 全力以赴 开始创新 那么学习编程的孩子，从一开始接触到后期的比赛、输出也是经历了这四个阶段。\n产生兴趣。刚接触少儿编程，对编程有新鲜感，关注在添加角色，添加炫酷的动画效果等等上。 变的认真。随着学习的深入，孩子会不仅仅在简单的实现效果上了，而是用新学的编程知识来丰富作品，为了一个效果的实现而持续研究，更“正儿八经”的开始学编程知识了。 全力以赴。这个时候的孩子应该会达到“心流”状态，经常为做出效果或调试bug而全力以赴，这种状态有兴趣吸引，并且掌握了一定的知识量和持续挑战（高逆商）之后产生的。 开始创新。在持续积累之后，对编程模块和代码都能掌控之后，开始有自己的想法去做东西，当然少儿编程是全程创新的工具，不仅仅局限在全部掌握之后，这也是青少年阶段及时反馈的一个持续学习动力。 四个阶段是孩子学习少儿编程大的路径，也就是一次大的刻意练习。\n在每节课中也存在小的刻意练习，每一次刻意练习有以下四个步骤：\n要有明确的目标，最好可以衡量。 专注。 努力的挑战走出舒适区，每一次练习都跟上一次练习有点不一样，然后每次练习都有反馈。 发现有问题及时改正。 例如我们在每节课中都用到PBL项目式编程，在每节课中都会有分析项目和分解问题、画思维导图的环节。\n每节课堂，老师引导着孩子通过观察成果包，孩子自己观察和分析角色的组成，每个角色的动画效果和游戏机制，然后学生自己画思维导图，老师指导修改，然后根据思维导图去一步一步完成作品。每堂课就是一次刻意练习，完成上面提到的四步。\n目标明确：分析项目的目标很明确，就是要画出思维导图，用于后期创作基础。 专注：孩子对成果包感兴趣，并且吸引深入研究，主动的专注去分析，加上老师的鼓励，更加认真。 迈出舒适区，每次都有反馈。这个是分析从简单到复杂的过程，每次新的知识对于孩子来说都是迈出舒适区，从认识思维导图、到学会、到熟练掌握都是在进步。每次反馈也就是老师对作品有指导，这也是小班教学优势，老师能照顾到每个孩子的完成情况。 发现有问题及时改正：每一堂课，每一次练习都是在复盘以往的经验，这个刻意通过课堂笔记来记录并看到进步结果。 不光是锻炼孩子分析项目的能力，其他很多能力比如专注力、逻辑思维能力等等都能很好的用刻意练习这四步曲提升，每个能力的刻意练习都是要经过精心设计过的，这也是我们教研所要细化和落实的。\n","permalink":"http://localhost:1313/posts/2022-04-30-%E5%B0%91%E5%84%BF%E7%BC%96%E7%A8%8B%E7%9A%84%E6%95%99%E5%AD%A6%E6%95%B4%E4%BD%93%E7%AD%96%E7%95%A5/","summary":"最近通过写《编程，是一种更有效的刻意练习工具》，还有《少儿编程的需求价值分析》这两篇文章，也思考了很多少儿编程整个教学链条，从主张到理念再到","title":"少儿编程的教学整体策略"},{"content":"一、刻意练习 天才不是源于天赋，而是源于掌握正确的练习方法。 -《刻意练习》\n著名心理学家艾利克森在“专业特长科学”领域潜心几十年，研究了一系列行业或领域中的专家级人物：国际象棋大师、顶尖小提琴家、运动明星、记忆高手、拼字冠军、杰出医生等。\n他发现，不论在什么行业或领域，提高技能与能力的最有效方法全都遵循一系列普遍原则，他将这种通用方法命名为“刻意练习”。\n对于在任何行业或领域中希望提升自己的每个人，刻意练习是黄金标准，是迄今为止发现的最强大的学习方法。\n所以一个人要在某个领域，某个专业上取得成就，也需要不断的刻意练习，不断的精进自我，才能达到目标。\n二、青少儿的刻意练习 在青少年阶段，还没形成自己的专业路线，现阶段是广泛的学习内容，或者换句话说，学习就是青少年的专业，刻意练习就是在不断提升自己的思维能力、逻辑能力、学习力的过程。\n一个简单的公式：学习=学科知识+能力。\n能力的提升就需要刻意练习，如何刻意练习？有没有更有效的工具？\n三、编程，更有效的刻意练习工具 从工具的角度来说\n**工具需要有兴趣点。**特别是对于孩子来说，兴趣是引导孩子最好的学习动力，孩子愿意接触、坚持学习、深入研究，孩子从而能在这个领域深入下去，持续研究，保持升级。\n**工具需符合孩子发展规律和特点。**编程根据孩子的年龄段的不同设置不同的编程方式和工具，编程的工具和方式要符合孩子的发展规律，例如幼儿用平板，一到三年级用图形化，四年级以上用python，五年级以上用C++。\n**工具需具有阶梯升级。**编程是一个从简单到复杂，从分散到融合的学习过程。一开始用单一的积木拼搭，完成简单的动画，到中期，可以完成一个比较复杂的编程作品，再到后来抽象阶段，用编程解决复杂的现实问题。整个过程是一个进阶的过程，中间有平滑的学习曲线，一直吸引着孩子持续往更高级学习。\n**工具需要一惯性。**编程不仅仅是一项工具，它还能运用到学习、生活中，学习编程之后，不会抛弃不用，可以改变你看问题的角度，更可以把编程融入到生活中，改变自己的生活方式。\n从刻意练习的方面来讲\n**专注力的刻意练习。**专注力培养不是一天两天被动养成的，而是通过刻意练习培养出来的。因为孩子对少儿编程有兴趣，所以会持续专注在编程上。通过坐下来，静下心来，研究和编写程序，一步一步的达到专注力增强，能“坐下来”的时间增加，从而提升孩子的专注力。\n**逻辑思维能力的刻意练习。**一个孩子的逻辑思维能力直接影响孩子的学习力和行为习惯。逻辑思维能力是孩子影响一生能力的底层逻辑。逻辑思维能力也不是被动形成的，而是通过刻意练习锻炼出来的。编程，可以从简单的逻辑，比如几个模块的拼搭，到后期完全抽象的代码，编程的每一步都是在锻炼孩子的逻辑思维，而且整个过程是孩子主动的，是想完成挑战的，学习编程的过程，就是逻辑逻辑思维培养的过程。\n**创新能力的刻意练习。**其实创造力和创新能力和想的多是两个不同的含义。创新思维是在拥有了更多的知识积累和思维沉淀之后，从实际问题出发，用更先进的思维、方式和方法，去创造价值的过程。所以它不是一时的、暂时的，而是一贯的，持续深入的，所以创新能力也是不断刻意练习的过程。在课堂上，老师鼓励、引导孩子去创新，把自己的想法实现出来，或者用不同的解题思路去解决，都是在培养孩子的创新。形成思维意识之后，孩子就会有创新习惯，遇到什么事情就会考虑用更好的方式解决，就会出现创新。\n**解决问题的刻意练习。**解决问题是每个孩子甚至每个成人都必须具备的能力。因为编程是PBL式学习，也就是每个编程项目都是一个问题（项目），做每一个项目都要从构思、规划、编码、测试、调试几个步骤去完成，也就是说，编程的过程就是解决问题的过程。从小的问题开始解决，到后期的高深复杂的问题，每次项目的完成，即意味着解决了一个问题。每个问题的解决，都是对孩子能力的增强，信心的增强，也促进孩子挑战更高的难度，去想解决更复杂的问题（项目）。\n**对复盘思维、持续精进的刻意练习。**复盘思维也是每个人都应该具备的能力。小到写作业检查，大到一个项目的迭代，都是复盘思维的体现。每个编程项目也是一样的，不可能一遍过，需要不断的修改bug，不断的调试，才能达到无缺陷的程度。所以每一次的检查、调试、迭代都是一次复盘的过程，持续精进的过程，也就是提升这种能力的过程。\n把编程定义为一种更有效的刻意练习工具，孩子们可以利用工具，提升自己的各种能力，精进自我，持续向好。也把这种编程精神作为一种倡导精神，融入到自我的人生中，实现自己人生价值的状态。\n","permalink":"http://localhost:1313/posts/2022-04-30-%E7%BC%96%E7%A8%8B%E6%98%AF%E4%B8%80%E7%A7%8D%E6%9B%B4%E6%9C%89%E6%95%88%E7%9A%84%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0%E5%B7%A5%E5%85%B7/","summary":"一、刻意练习 天才不是源于天赋，而是源于掌握正确的练习方法。 -《刻意练习》 著名心理学家艾利克森在“专业特长科学”领域潜心几十年，研究了一系列行","title":"编程，是一种更有效的刻意练习工具"},{"content":"8年前，我做软件产品的开发的工作，软件开发是一项复杂度很高的工作。像Windows操作系统，是分散在全球大大小小的很多公司，几万人，经过很多年的研发，密切协作才共同开发完成。因为它的规模大、风险高、强调合作，致使软件开发这件事情就成了一个非常需要统筹规划，逐步实施的一个工程。\n软件工程的开发模型大致有两种方式：第一种是瀑布型开发模型，即：概要设计-详细设计-代码实施-测试-部署，这几个步骤，然后针对这几个步骤划定工期，逐步实施。\n概要设计主要是确定需求，拆解功能，划分模块（这阶段极像少儿编程中的项目分析，画思维导图）； 详细设计是针对本模块，要计划通过什么样的技术一步步做出来（这阶段极像少儿编程中的角色动画分析，画流程图）； 代码实施就是按照概设、详设，编写代码，做出功能。 测试：就是验证软件是否符合设计，调试缺陷的过程。 部署：就是上线，开始使用。 瀑布型开发模式是一个非常成熟的项目管理方式，对于需求变化不大，进度、人员可控时非常适合。但是这种方式也比较理想化，在现实中，经常后期会有需求更改，后期风险前期预估不足，进度不可控，人员调配不可控等等事情发生，导致项目失败或延期。\n随着行业的发展，出现了一种原型迭代开发模型。即我先做出一个实现关键功能的原型出来，根据这个原型进行评审-修改-再完善，进入下一个迭代周期，把完善好的再作为原型进行开发。整个过程形成螺旋形上升，逐渐完善的开发周期，直至项目完成。\n这种开发模型的好处在于，即使后期发生大的需求变更，也不会因为前期规划不足导致返工。不会因为过程中的风险，导致项目失败或延期。\n其实两种开发方式都可以完成项目，但是理念的不一样，进而做事情的方式不一样。有意思的是，现在在生活中或者工作中，也存在着这两种理念风格，两种风格理念决定着做事情的方式也不相同。\n瀑布模型和迭代模型，两种模型不是零和博弈，非对即错，而是可以相互融合，互相支撑的综合体。\n迭代的模型在工作、生活的过程中都是普遍存在的，这种发展方式更像是自然界中的进化论，事情的推进和走向，可能都不是在开始就决定的，是随着事情的推进而演化的，我们也都希望这种演化朝着好的方向去发展。\n所以逐步形成自己做事情的思路：考虑要推进一件事情的时候，首先考虑这件事情的靠谱度，如果不靠谱，则需要再积累，把各种因素都往概率高的方向推进，直到靠谱度达到自己的预期；如果凭自己经验判断此事情在6成-8成左右（根据个人性格），这件事情就可以做起来了。\n在事情做起来了，就可以努力把事情向自己期望的方向推进。\n在事情发展的过程中，在行动落实的时候，可以采取规划-计划-实施-反思-调整这样的瀑布模型来做事情。这样善于把事情做好，把关键点做好。\n在事情发展的过程中，肯定会有困难，有问题产生，这是客观规律。重要的是对待问题的方式，我们要把问题和困难当做事情的一部分。现接受自己现在的自己，然后提升自己的能力，努力把问题解决掉，通过反思，不要在发生类似的问题，然后迎接下一个阶段。\n通过这样的螺旋迭代，逐步完美的模型，推进事情发展。\n","permalink":"http://localhost:1313/posts/2022-04-26-%E8%9E%BA%E6%97%8B%E8%BF%AD%E4%BB%A3%E9%80%90%E6%AD%A5%E5%AE%8C%E7%BE%8E%E7%9A%84%E7%94%9F%E6%B4%BB%E6%96%B9%E5%BC%8F/","summary":"8年前，我做软件产品的开发的工作，软件开发是一项复杂度很高的工作。像Windows操作系统，是分散在全球大大小小的很多公司，几万人，经过很多","title":"螺旋迭代，逐步完美的生活方式"},{"content":" 一代人有一代人的长征。\n现在第四波疫情疯狂来袭，国外开放躺平，我国坚持动态清零，今天，上海还在遭受疫情肆虐，甚至有人吃不上饭，很难想象这是在2022年。\n自我们创业少儿编程以来，经历了两次疫情停工，2020年五个月，2022年一个多月。两次虽然不是在重灾区，但是也实实在在的受到了影响。\n创业从来都是九死一生。\n现在全球经济大环境下行，双减政策大趋势，再加上疫情影响，教培创业真是兢兢战战，步履维艰。\n勇气，就是在你看清生活的现实之后，依然热爱生活！\n虽然创业很难，虽然教培不再是赚钱的行业，虽然前方困难重重，但是我的内心毅然向往“专业少儿编程”，依然对未来充满信心。\n","permalink":"http://localhost:1313/posts/2022-04-12-%E7%96%AB%E6%83%85%E4%B8%AD%E5%AE%88%E6%9C%9B%E6%9C%AA%E6%9D%A5/","summary":"一代人有一代人的长征。 现在第四波疫情疯狂来袭，国外开放躺平，我国坚持动态清零，今天，上海还在遭受疫情肆虐，甚至有人吃不上饭，很难想象这是在2","title":"疫情中，守望未来"},{"content":"众所周知，世界上所有的事情都有一个浅度和深度的区别。所有的事情也是一个由浅入深的过程，从表面到实质的发展。\n比如玩这件事情，有些玩真的只是在玩，在消磨时间的同时，单纯的体验乐趣，没有任何意义的去玩。而现在学生教育中的“玩”，可大有学问，要在玩中学，要玩的有意义，有目的性地玩，在玩的过程中提升孩子各方面的能力。\n比如阅读，消磨时光，看热闹，快速浏览的阅读是浅阅读，这种阅读可能只是知道这本书的大体意思，讲了一件什么事情，仅限于此。而相对的深度阅读呢，就是读经典名著，专业书籍等类书籍，我们要逐字逐句，耐下心来，反复的看几遍，有所感悟，或是联系我们的自身实际，解决实际的问题。\n浅阅读和深阅读不是对立的，而是相辅相成的。有的书可以浅阅读，有的书呢，必须深阅读。不同种类的书，可以让你收获不同的阅读体验。\n少儿编程同样是这样的，分为浅度的学习和深度的学习。\n浅度的少儿编程学习是仅仅浮于学习编程的表面，单纯的通利用积木模块的拼搭，把一个编程作品拼凑起来而已，只是能锻炼孩子使用现有模块积木的熟练度，而无其他方面能力的提升。现在普遍家长的认知也在这一层面，看到孩子能作出一个编程作品来，就感觉到孩子学到了“少儿编程”，学会了“少儿编程”。\n其实不然，只是单纯的做出一个编程作品来，对于少儿编程而言，只是冰山一角。从少儿编程的发展历程来看，从LOGO语言的创立到SCRATCH的流程，出发点都是在借助这些编程平台和工具锻炼孩子们的各方面的能力，比如专注力、创造力、团队协作能力，还有解决问题的能力，更深入的可以解决实际的问题。这些“编程之外”的能力提升才是学习少儿编程的目的所在。让孩子们通过兴趣，学习少儿编程，在编写编程作品的过程中，老师的引导下，孩子们让自己建构成长起来，通过编程，建立自己思考问题的思维模型，理解世界的一些发展规律，树立自己的三观，这些看不到的方面，才是我们崇尚和追求的。\n现在的少儿编程市场，特别是一些小品牌少儿编程培训，不理解什么是真正的“少儿编程”教育，都是一些门外汉去搞少儿编程培训。没有成熟的课程体系，没有少儿编程专业的支撑，没有教育的方式方法就来搞所谓的“少儿编程培训”，单纯的教授学生一些编程的套路和技巧。虽然能作出编程作品来，但学生的各方面能力反而造成压抑，违背孩子们的发展规律，造成不必要的成长损失。\n我们认可的编程教育一定是要建立在儿童成长规律上，每个编程阶段的教育能符合该年龄段的认知水平。从孩子自身能力出发，调动孩子们的兴趣主动性，自发的喜欢编程，并在编程学习的过程中，以学生为主导，通过主动思考、思维提升、知识吸收等提升学生的各方面能力。\n","permalink":"http://localhost:1313/posts/2019-12-26-%E6%B5%85%E8%B0%88%E5%B0%91%E5%84%BF%E7%BC%96%E7%A8%8B%E6%95%99%E8%82%B2%E7%9A%84%E6%B5%85%E4%B8%8E%E6%B7%B1/","summary":"众所周知，世界上所有的事情都有一个浅度和深度的区别。所有的事情也是一个由浅入深的过程，从表面到实质的发展。 比如玩这件事情，有些玩真的只是在玩","title":"浅谈少儿编程教育的浅与深"}]